# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - install
  - lint
  - test
  - build
  - validate
  - e2e
  - deploy

variables:
  NODE_VERSION: "18"
  POSTGRES_DB: test_db
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password

image: node:${NODE_VERSION}

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/

install:dependencies:
  stage: install
  script:
    - npm ci
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour

lint:eslint:
  stage: lint
  script:
    - npm run lint
  needs: ["install:dependencies"]

lint:typescript:
  stage: lint
  script:
    - npm run type-check
  needs: ["install:dependencies"]

test:unit:
  stage: test
  script:
    - npm run test:coverage
  coverage: '/All files[^|]*\\|[^|]*\\s+([\\d\\.]+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
      junit: test-results/junit.xml
    paths:
      - coverage/
    expire_in: 1 week
  needs: ["install:dependencies"]

build:production:
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - .next/
    expire_in: 1 week
  needs: ["install:dependencies", "lint:eslint", "lint:typescript", "lint:format", "test:unit"]
  only:
    - main
    - develop

lint:format:
  stage: lint
  script:
    - npm run format:check
  needs: ["install:dependencies"]

validate:browser:
  stage: validate
  image: mcr.microsoft.com/playwright:v1.40.0-focal
  script:
    - npm ci
    - npm run start & echo $! > server.pid
    - ./node_modules/.bin/wait-on -t 30000 http://localhost:3000
    - ./node_modules/.bin/chrome-devtools-mcp validate --url http://localhost:3000
    - ./node_modules/.bin/chrome-devtools-mcp validate --url http://localhost:3000/inventory
    - ./node_modules/.bin/chrome-devtools-mcp validate --url http://localhost:3000/suppliers
    - ./node_modules/.bin/chrome-devtools-mcp screenshot --url http://localhost:3000 --output validation-reports/ci-dashboard.png
    - kill $(cat server.pid) || true
  artifacts:
    when: always
    paths:
      - validation-reports/
    expire_in: 1 week
  needs: ["build:production"]
  only:
    - main
    - develop

validate:database:
  stage: validate
  script:
    - echo "Validating database schema against Neon..."
    - npm ci
    - npm run db:validate
  needs: ["build:production"]
  only:
    - main
    - develop

e2e:playwright:
  stage: e2e
  image: mcr.microsoft.com/playwright:v1.40.0-focal
  script:
    - npm ci
    - npx playwright install
    - npm run test:e2e
  artifacts:
    when: on_failure
    paths:
      - playwright-report/
    expire_in: 1 week
  needs: ["build:production", "validate:browser"]
  when: manual
  only:
    - main

deploy:staging:
  stage: deploy
  script:
    - echo "Deploying to staging..."
  environment:
    name: staging
    url: https://staging.yourdomain.com
  needs: ["build:production", "validate:browser", "validate:database"]
  only:
    - develop
  when: manual

deploy:production:
  stage: deploy
  script:
    - echo "Deploying to production..."
  environment:
    name: production
    url: https://yourdomain.com
  needs: ["build:production", "e2e:playwright", "validate:browser", "validate:database"]
  only:
    - main
  when: manual
