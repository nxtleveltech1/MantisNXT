version: '3.8'

services:
  # PostgreSQL Database with Production Security
  postgres:
    image: postgres:15-alpine
    container_name: mantisnxt-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: mantisnxt
      POSTGRES_USER: ${DB_USER:-mantisnxt}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema:/docker-entrypoint-initdb.d/schema:ro
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - "127.0.0.1:${DB_PORT:-5432}:5432"
    networks:
      - mantisnxt-network
    secrets:
      - postgres_password
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-mantisnxt} -d mantisnxt"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache with Security
  redis:
    image: redis:7-alpine
    container_name: mantisnxt-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "127.0.0.1:${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - mantisnxt-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Application with Security
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
        NEXT_PUBLIC_APP_ENV: ${NODE_ENV:-production}
    container_name: mantisnxt-app
    restart: unless-stopped
    user: "1001:1001"
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${DB_USER:-mantisnxt}:${DB_PASSWORD}@postgres:5432/mantisnxt
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY_FILE: /run/secrets/supabase_service_key
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-10485760}
      UPLOAD_DIR: /app/uploads
    ports:
      - "127.0.0.1:${APP_PORT:-3000}:3000"
    volumes:
      - uploads_data:/app/uploads
      - app_logs:/app/logs
      - app_tmp:/tmp
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    networks:
      - mantisnxt-network
    secrets:
      - supabase_service_key
      - jwt_secret
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: mantisnxt-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - uploads_data:/var/www/uploads:ro
      - nginx_logs:/var/log/nginx
      - ./nginx/modsecurity:/etc/nginx/modsecurity:ro
    networks:
      - mantisnxt-network
    depends_on:
      - app
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Migration Service
  migrations:
    build:
      context: .
      dockerfile: Dockerfile.migrations
    container_name: mantisnxt-migrations
    environment:
      DATABASE_URL: postgresql://${DB_USER:-mantisnxt}:${DB_PASSWORD}@postgres:5432/mantisnxt
      MIGRATION_MODE: ${MIGRATION_MODE:-up}
    networks:
      - mantisnxt-network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/app/migrations:ro
      - ./scripts:/app/scripts:ro
    deploy:
      restart_policy:
        condition: none

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mantisnxt-prometheus
    restart: unless-stopped
    user: "nobody"
    read_only: true
    ports:
      - "127.0.0.1:${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    tmpfs:
      - /tmp
    networks:
      - mantisnxt-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9090'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mantisnxt-grafana
    restart: unless-stopped
    user: "472"
    ports:
      - "127.0.0.1:${GRAFANA_PORT:-3001}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_password
      GF_SECURITY_ADMIN_USER: admin
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN:-localhost}
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3001}
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: strict
      GF_SECURITY_CONTENT_TYPE_PROTECTION: "true"
      GF_SECURITY_X_CONTENT_TYPE_OPTIONS: nosniff
      GF_SECURITY_X_XSS_PROTECTION: "true"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mantisnxt-network
    secrets:
      - grafana_password
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Log Aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: mantisnxt-loki
    restart: unless-stopped
    user: "10001"
    read_only: true
    ports:
      - "127.0.0.1:${LOKI_PORT:-3100}:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    tmpfs:
      - /tmp
    networks:
      - mantisnxt-network
    command: -config.file=/etc/loki/local-config.yaml
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Log Collection - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: mantisnxt-promtail
    restart: unless-stopped
    user: "root"
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    networks:
      - mantisnxt-network
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: mantisnxt-node-exporter
    restart: unless-stopped
    user: "nobody"
    read_only: true
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - mantisnxt-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Cadvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: mantisnxt-cadvisor
    restart: unless-stopped
    privileged: true
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    networks:
      - mantisnxt-network
    deploy:
      resources:
        limits:
          memory: 200M
          cpus: '0.3'

  # Automated Backup Service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: mantisnxt-backup
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${DB_USER:-mantisnxt}:${DB_PASSWORD}@postgres:5432/mantisnxt
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      S3_BUCKET: ${BACKUP_S3_BUCKET}
      S3_REGION: ${BACKUP_S3_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - uploads_data:/app/uploads:ro
      - backup_data:/backup
      - ./scripts/backup.sh:/app/backup.sh:ro
    networks:
      - mantisnxt-network
    depends_on:
      - postgres

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  supabase_service_key:
    file: ./secrets/supabase_service_key.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/mantisnxt_postgres_data
  redis_data:
    driver: local
  uploads_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/mantisnxt_uploads_data
  app_logs:
    driver: local
  app_tmp:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  backup_data:
    driver: local

networks:
  mantisnxt-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"