// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/admin/audit" | "/admin/config/workflows" | "/admin/monitoring/dashboard" | "/admin/organization" | "/admin/organizations" | "/admin/organizations/[id]" | "/admin/organizations/billing" | "/admin/roles" | "/admin/roles/permissions" | "/admin/security" | "/admin/security/access-logs" | "/admin/security/compliance" | "/admin/security/data-encryption" | "/admin/security/ip-whitelist" | "/admin/settings/backup" | "/admin/settings/currency" | "/admin/settings/email" | "/admin/settings/financial" | "/admin/settings/general" | "/admin/settings/integrations" | "/admin/settings/localization" | "/admin/settings/regional" | "/admin/users" | "/analytics" | "/auth/forgot-password" | "/auth/login" | "/auth/register" | "/auth/two-factor" | "/auth/verify-email" | "/contracts" | "/inventory" | "/invoices" | "/messages" | "/payments" | "/purchase-orders" | "/suppliers" | "/suppliers/[id]/edit" | "/suppliers/new"
type AppRouteHandlerRoutes = "/api/alerts" | "/api/analytics/anomalies" | "/api/analytics/comprehensive" | "/api/analytics/dashboard" | "/api/analytics/predictions" | "/api/analytics/recommendations" | "/api/auth/login" | "/api/health" | "/api/health/database" | "/api/inventory" | "/api/inventory/[id]" | "/api/inventory/analytics" | "/api/inventory/complete" | "/api/inventory/items" | "/api/inventory/products" | "/api/inventory/products/[id]" | "/api/monitoring/metrics" | "/api/stock-movements" | "/api/suppliers" | "/api/suppliers/[id]" | "/api/suppliers/discovery" | "/api/suppliers/discovery/health" | "/api/suppliers/metrics" | "/api/suppliers/pricelists" | "/api/suppliers/pricelists/upload" | "/api/suppliers/v3" | "/api/suppliers/v3/[id]" | "/api/suppliers/v3/ai/discover" | "/api/suppliers/v3/export" | "/api/test-db" | "/api/test/live" | "/api/upload" | "/api/upload/xlsx" | "/api/v2/inventory" | "/api/v2/inventory/[id]" | "/api/v2/inventory/upload" | "/api/v2/suppliers" | "/api/v2/suppliers/[id]" | "/api/warehouses" | "/api/warehouses/[id]"
type PageRoutes = never
type LayoutRoutes = "/"
type RedirectRoutes = never
type RewriteRoutes = "/api/metrics"
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/admin/audit": {}
  "/admin/config/workflows": {}
  "/admin/monitoring/dashboard": {}
  "/admin/organization": {}
  "/admin/organizations": {}
  "/admin/organizations/[id]": { "id": string; }
  "/admin/organizations/billing": {}
  "/admin/roles": {}
  "/admin/roles/permissions": {}
  "/admin/security": {}
  "/admin/security/access-logs": {}
  "/admin/security/compliance": {}
  "/admin/security/data-encryption": {}
  "/admin/security/ip-whitelist": {}
  "/admin/settings/backup": {}
  "/admin/settings/currency": {}
  "/admin/settings/email": {}
  "/admin/settings/financial": {}
  "/admin/settings/general": {}
  "/admin/settings/integrations": {}
  "/admin/settings/localization": {}
  "/admin/settings/regional": {}
  "/admin/users": {}
  "/analytics": {}
  "/api/alerts": {}
  "/api/analytics/anomalies": {}
  "/api/analytics/comprehensive": {}
  "/api/analytics/dashboard": {}
  "/api/analytics/predictions": {}
  "/api/analytics/recommendations": {}
  "/api/auth/login": {}
  "/api/health": {}
  "/api/health/database": {}
  "/api/inventory": {}
  "/api/inventory/[id]": { "id": string; }
  "/api/inventory/analytics": {}
  "/api/inventory/complete": {}
  "/api/inventory/items": {}
  "/api/inventory/products": {}
  "/api/inventory/products/[id]": { "id": string; }
  "/api/metrics": {}
  "/api/monitoring/metrics": {}
  "/api/stock-movements": {}
  "/api/suppliers": {}
  "/api/suppliers/[id]": { "id": string; }
  "/api/suppliers/discovery": {}
  "/api/suppliers/discovery/health": {}
  "/api/suppliers/metrics": {}
  "/api/suppliers/pricelists": {}
  "/api/suppliers/pricelists/upload": {}
  "/api/suppliers/v3": {}
  "/api/suppliers/v3/[id]": { "id": string; }
  "/api/suppliers/v3/ai/discover": {}
  "/api/suppliers/v3/export": {}
  "/api/test-db": {}
  "/api/test/live": {}
  "/api/upload": {}
  "/api/upload/xlsx": {}
  "/api/v2/inventory": {}
  "/api/v2/inventory/[id]": { "id": string; }
  "/api/v2/inventory/upload": {}
  "/api/v2/suppliers": {}
  "/api/v2/suppliers/[id]": { "id": string; }
  "/api/warehouses": {}
  "/api/warehouses/[id]": { "id": string; }
  "/auth/forgot-password": {}
  "/auth/login": {}
  "/auth/register": {}
  "/auth/two-factor": {}
  "/auth/verify-email": {}
  "/contracts": {}
  "/inventory": {}
  "/invoices": {}
  "/messages": {}
  "/payments": {}
  "/purchase-orders": {}
  "/suppliers": {}
  "/suppliers/[id]/edit": { "id": string; }
  "/suppliers/new": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
